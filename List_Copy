# Review03-ArrayList_LinkedList

//链表的浅拷贝，只是将将引用拷贝了一份
public Node Copy(Node head){
    Node cur=head;
    Node result=null;
    Node last=null;
    
    while (cur!=null){
        Node node=new Node(cur.val);
        //node.val=cur.val;
        if(result==null){
            result=node;
        }else {
            last.next=node;
        }
        last=node;
        cur=cur.next;
    }
    return result;
}

============================================================================================================================
//*****给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。要求返回这个链表的深度拷贝。*****

//解题思路：1、先复制所有的结点
//         2、处理random指向  
(太重要啦啦啦啦啦啦啦啦啦啦啦，必须搞会)
public class CNode {
    int val;
    CNode next = null;
    CNode random = null;

    CNode(int val) {
        this.val = val;
    }
}

 public CNode complexCopy(CNode head) {
        if (head == null) {
            return null;
        }
        //先复制链表并将复制的新链表连接到旧链表上
        CNode p1 = head;
        while (p1 != null) {
            CNode p2 = new CNode(p1.val);
            p2.next = p1.next;
            p1.next = p2;

            p1 = p2.next;
        }
        
        //处理新链表random的指向
        p1 = head;
        while (p1 != null) {
            CNode p2 = p1.next;
            if (p1.random != null) {
                p2.random = p1.random.next;
            }

            p1 = p2.next;
        }
        
        //将新旧链表分开，最终返回新链表
        p1 = head;
        CNode newHead = head.next;
        while (p1 != null) {
            CNode p2 = p1.next;

            p1.next = p2.next;
            if (p2.next != null) {
                p2.next = p2.next.next;
            }

            p1 = p1.next;
        }

        return newHead;
    }

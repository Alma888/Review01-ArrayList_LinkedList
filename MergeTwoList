# Review03-ArrayList_LinkedList

//合并两个有序链表,合并成一个有序链表（整理）

public class MTwoList {
    public ListNode mergeTwoLists1(ListNode l1,ListNode l2){
        //将排序后的元素全部插入到一个新的链表中
        if(l1==null){
            return l2;
        }
        if(l2==null){
            return  l1;
        }
        ListNode cur1=l1;
        ListNode cur2=l2;
        ListNode result=null;
        ListNode last=null;

        while (cur1!=null&&cur2!=null){
            if(cur1.val<=cur2.val){
                ListNode next=cur1.next;
                if (result==null){
                    result=cur1;
                }else {
                    last.next = cur1;
                }
                last=cur1;  //记得及时更新last
                cur1=next;
            }else {
                ListNode next=cur2.next;
                if (result==null){
                    result=cur2;
                }else {
                    last.next = cur2;
                }
                last=cur2;  //记得及时更新last
                cur2=next;

            }
        }
        if(cur1!=null){
            last.next=cur1;
        }else {
            last.next=cur2;
        }
        return result;
    }
    =============================================================================================================================

    //递归实现
    public ListNode mergeTwoLists2(ListNode l1,ListNode l2){
        if(l1==null){
            return l2;
        }
        if(l2==null){
            return  l1;
        }

        if(l1.val<=l2.val){
            l1.next=mergeTwoLists2(l1.next,l2);
            return l1;
        }else {
            l2.next=mergeTwoLists2(l1,l2.next);
            return l2;
        }
    }
 }

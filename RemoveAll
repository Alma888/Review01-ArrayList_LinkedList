# Review03-ArrayList_LinkedList

// 删除链表中等于给定值 val 的所有节点  （重点整理）

//四种方法
public class RemoveAll {
    public static ListNode removeElements1(ListNode head,int val){
        //1、判断如果是第一个结点，特殊处理  //见********
        ListNode cur=head;
        ListNode prev=null;
        while (cur!=null){
            if(cur.val==val){
                if (cur == head) {//********
                    head = cur.next;
                } else {
                    prev.next = cur.next;
                }
            } else {
                prev = cur;
            }
            cur = cur.next;
        }

        return head;
    }
====================================================================================================================================
    public ListNode removeElements2(ListNode head, int val) {
        //将不是和指定元素相等的其他元素结点插入到新链表中  //见********
        ListNode result = null;
        ListNode last = null;   // 记录目前 result 中的最后一个结点

        ListNode cur = head;
        while (cur != null) {
            if (cur.val == val) {
                cur = cur.next;
                continue;
            }

            ListNode next = cur.next;

            cur.next = null;
            if (result == null) {
                result = cur;  //********
            } else {
                last.next = cur;  //尾插
            }

            last = cur;

            cur = next;
        }

        return result;
    }
====================================================================================================================================

    public ListNode removeElements3(ListNode head, int val) {
        // 2、先避开第一个结点，回头再说  //见********
        if (head == null) {
            return null;
        }
        ListNode prev = head;//********
        ListNode cur = head.next;//********

        while (cur != null) {
            if (cur.val == val) {
                prev.next = cur.next;
            } else {
                prev = cur;
            }

            cur = cur.next;
        }

        if (head.val == val) {
            head = head.next;
        }

        return head;
    }
    ====================================================================================================================================

    public ListNode removeElements4(ListNode head, int val) {
        // 3、强行给第一个结点找一个前驱
        ListNode tmpHead = new ListNode(-1);
        tmpHead.next = head;
        ListNode prev = tmpHead;
        ListNode cur = head;

        while (cur != null) {
            if (cur.val == val) {
                prev.next = cur.next;
            } else {
                prev = cur;
            }

            cur = cur.next;
        }

        return tmpHead.next;
    }
}
